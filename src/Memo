02-04(월)
java.lang 패키지 소개
- lang은 Language(언어)의 줄임말이다. 쉽게 이야기해서 자바 언어를 이루는 가장 기본이 되는 클래스들을 보관하는 패키지뜻한다.

java.lang 패키지의 대표적인 클래스들
Object: 모든 자바 객체의 부모 클래스
String: 문자열
Integer, Long, Double: 래퍼 타입, 기본형 데이터 타입을 객체로 만든것
Class: 클래스 메타 정보
System: 시스템과 관련된 기본 기능들을 제공

Object 클래스
- 자바에서 모든 클래스의 최상위 부모 클래스는 항상 Object이다

묵시적
- 개발자가 코드에 직접 기술하지 않아도 시스템 또는 컴파일러에 의해 자동으로 수행되는 것을 의미
명시적
- 개발자가 코드에 직접 기술해서 작동하는 것을 의미

Object 다형성
- Object는 모든 클래스의 부모 클래스이다. 따라서 Object는 모든 객체를 참조할 수 있다.

02-05(수)
Object.toString()
- 객체의 참조값
- 메서드는 기본적으로 패키지를 포함한 객체의 이름과 객체의 참조값(해시코드)를 16진수로 제공한다.

Object와 OCP


정적 의존 관계
- 클래스 의존 관계 그림이 바로 정적 의존 관계이다.

동적 의존 관계
- 프로그램을 실행하는 런타임에 확인할 수 있는 의존관계이다.

equals() - 1. 동일성과 동등성
- 자바는 두 객체가 같다라는 표현을 2가지로 분리해서 제공한다.

동일성
- 연산자를 사용해서 두 객체의 참조가 동일한 객체를 가리키고 있는지 확인
동등성
- equals() 메서드를 사용하여 두 객체가 논리적으로 동등한지 확인

02-09(일)
불변 객체
- 기본형: 하나의 값을 여러 변수에서 절대 공유하지 않는다.
- 참조형: 하나의 객체를 참조값을 통해 여러 변수에서 공유할 수 있다.

공유 참조와 사이드 이펙트
사이드 이펙트: 프로그래밍에서 어떤 계산이 주된 작업 외에 추가적인 부수 효과를 일으키는 것을 말한다.

불변 객체 - 도입
- 객체의 상태(객체 내부의 값, 필드, 멤버 변수)가 변하지 않는 객체를 불변 객체라 한다.
- 클래스를 상태가 변하지 않는 불변 클래스로 다시 만들어보자.

가번 객체
- 처음 만든 이후 상태가 변할 수 있다는 뜻이다.
불변 객체
- 처음 만든 이후 상태가 변하지 않는다 뜻이다.

02-13(수)
String
- String은 클래스이다.

byte[]
- 자바에서 문자 하나를 표현하는 char는 2byte를 차지한다. 
- 메모리를 더 효율적으로 사용할 수 있게 변경되었다.

String 클래스 비교
- == 비교가 아니라 항상 equals() 비교를 해야한다.
String str3 = "hello";
String str4 = "hello";
- 같은 이름이 있을 경우 메모리 또 생성이 되는게 아니라 하나만 생성이 된다.

String 클래스 - 불변 객체
- String은 불변 객체이다. 따라서 생성 이후에 절대로 내부의 문자열 값을 변경할 수 없다.

String 클래스 - 주요 메서드1
- 

02-15(토)
불병인 String 클래스의 단점
- 불변인 String 클래스에도 단점이 있다.
- 불변이 아닌 가변 String이 존재하면 된다.
- 이런 문제를 해결하기 위해 자바는 StringBuilder라는 가변 String을 제공한다. 물론 가변의 경우 사이드 이펙트에 주의해야한다.
- String string = sb.toString(); // 불변으로 다시 변경 가능

가변 vs 불변
- String은 불변하다. 즉, 한번 생성되면 그 내용을 변경할 수 없다.
- String 객체가 생성되고, 기존 객체는 버려진다. 이 과정에서 메모리와 시간을 더 많이 소모한다.
- 반면에, StringBuilder는 가변적이다. 하나의 StringBuilder 객체 안에서 문자여을 추가, 삭제, 수정할 수 있으며, 이때마다 새로운 객체를 생성하지 않는다. 이로 인해 메모리 사용을 줄이고 성능을 향상 시킬 수 있다. 단 사이드 이펙트를 주의해야 한다.
- StringBuilder는 보통 문자열을 변경하는 동안만 사용하다가 문자열 변경이 끝나면 안전한(불변) String으로 변환하는 것이 좋다.

String 최적화
- 자바 컴파일러는 다음과 같이 문자열 리터럴을 더하는 부분을 자동으로 합쳐진다.

StringBuilder vs StringBuffer
- StringBuffer는 내부에 동기화가 되어 있어서, 멀티 스레드 상황에 안전하지만 동기화 오버헤드로 인해 성능이 느리다.
- StringBuilder는 멀티 쓰레드에 상황에 안전하지 않지만 동기화 오버헤드가 없으므로 속도가 빠르다.

메서드 체인닝
- 코드를 간결하게 가능
- 만드는 사람이 수고로우면 쓰는 사람이 편하고, 만드는 사람이 편하면 쓰는 사람이 수고롭다.
- 메서드 체이닝은 구현하는 입장에서는 번거롭지만 사용하는 개발자는 편리해진다.
- 참고뢰 자바의 라이브러리와 오픈 소스들은 메서드 체이닝 방식을 종종 사용한다.